spring框架
	spring：在2002年出现，解决企业级开发
		帮助开发人员创建对象，管理对象之间的关系

	spring核心技术：IOC AOP 能实现模块之间，类之间的解耦合。

	依赖：
		class A中使用了class B的属性或者方法。A依赖于B
		spring能管理A和B之间的关系
	
	spring轻量，可以集成其他框架

框架是其他人写好的软件
	需要知道框架能干什么 mybatis可以访问数据库
	需要知道框架的语法
	框架的内部实现

spring第一个核心功能 ioc：Inversion of Contorl 控制反转，是一个理论
	描述：把对象的创建，赋值，管理等工作都交给容器实现。对象的创建由外部资源来完成
	spring也称为容器

	控制：创建对象，对象赋值，对象之间的关系管理
	反转：
		正转：开发人员使用new，开发人员主动管理对象
		反转：把开发者管理创建对象的权限转移给代码之外的容器实现。由容器来代替开发者管理和创建对象
	
	容器是一个服务器软件，一个框架

	作用：
		减少对代码的改动也能实现不同的功能。实现解耦合

    适合使用spring的对象：
        dao类，service类，controller类，工具类
        spring中的对象默认是单例的，在容器中叫这个名的对象只有一个
    不适合在spring中的对象：
        实体类：实体类的数据来自数据库
        servlet，监听器，过滤器（由tomcat创建）
    如何把对象放到容器中：
        使用xml文件：使用《bean》
        使用注解

java中创建对象的方式：
	1.构造方法 new
	2.反射
	3.序列化
	4.克隆
	5.ioc：容器创建对象-----不需要再程序中写代码
	6.动态代理

ioc的体现：
	servlet：
		1.创建类继承HttpServlet
		2.再web.xml注册Myservlet
		3.没有创建过Myservlet对象
		4.Servlet对象是tomcat服务器帮助创建的
		tomcat也称为容器：
			里面存放的有：监听器，过滤器
	
ioc的技术实现
	DI 依赖注入
		只需要在程序中提供要使用的对象名称，对象如何创建赋值查找都由容器实现（容器里有个工程师）
	spring使用di实现了ioc功能，spring底层创建对象使用的是反射

	ioc：控制反转
	    是一种思想，指导开发者在容器中，在代码之外，给属性赋值，管理依赖

	spring使用DI技术，底层使用反射机制

	Di给属性赋值
	    set注入：使用set方法
	        1.简单类型的set注入
	             <property name="属性名" value="属性值" />
	        2.引用类型的set注入
	            <property name="属性名" ref="bean的id（对象名称）" />
	    构造注入:使用有参数的构造方法
	        使用<constructor-arg>标签
	            1.使用name属性：形参名
	            2.使用index属性：形参的位置

使用spring的步骤：
    1.加入依赖
        <dependency>
              <groupId>org.springframework</groupId>
              <artifactId>spring-context</artifactId>
              <version>5.2.5.RELEASE</version>
        </dependency>
    2.创建类
    3.创建spring的配置文件，使用bean声明对象
    4.使用对象，使用applicationContext接口和它的实现类：ClassPathXmlApplicationContext的getBean（）得到对象


对象的赋值
    1.基于xml的DI

    2.基于注解的DI【重要】
        @override就是一个注解

 多个配置文件
    1.每个文件都小，打开很块
    2.避免多人竞争带来的冲突
        一个模块一个配置文件
    分配方式：
        1.按业务功能
        2.按类的功能（数据库功能，事物相关，service相关）

基于注解的DI【重要】
    通过注解完成java对象的创建和属性赋值

    使用步骤：
        1.加入maven的依赖 spring-context，在加入spring-context的同时，间接加入spring-aop的依赖。
            使用注解必须使用spring-aop依赖
        2.在类中加入spring注解
        3.在spring的配置文件中，加入一个组件扫描器的标签，说明注解在项目中的位置

    自动注入：
        由spring根据某些规则，给引用类型赋值
        常用byName和byType方式
            byName：按名称注入
                java类中引用类型的属性名和spring容器中bean的id一样，数据类型一样，这样的bean赋值给引用类型
            byType：
                java类中引用类型的数据类型和spring容器中bean的class是同源关系的，这样的bean能赋值给引用类型

    需要学习的注解：
        1.@Component
            用于创建对象（普通对象）
        2.@Respotory
            创建dao对象（访问数据库）
        3.@Service
            创建service对象（处理业务逻辑）有事物功能
        4.@Controller
            创建控制器对象的，接收请求，显示处理结果
        5.@Value
            简单类型的赋值
        6.@Autowired
            spring中引用类型的赋值（byName和byTyep，默认使用byType）
        7.@Resource
            jdk中引用类型的赋值（默认使用byName）

        注解的使用步骤：
            1.加入依赖：
                spring-context 间接加入 spring-aop
            2.在类中加入注解
            3.在spring的配置文件中，加入组件扫描器的标签，<context:component-scan base-package="org.example.ba07" />

ioc可以实现解耦合
    ioc实现业务对象之间的解耦合：service和dao对象之间的解耦合



aop------面向切面编程

    动态代理：能创建对象，原有代码不改动的情况下可以实现功能的增加和功能的增强，减少重复代码，专注业务逻辑
        两种实现方式：
            jdk动态代理：要求目标类必须有接口
                使用Proxy Method InnovationHandler三个类实现动态代理
            CGLIB动态代理：不许需要有接口（使用继承的方式）
                对类的要求低，只要能继承就行，子类就是代理对象

    动态代理规范化：aop，aop的底层就是动态代理，设计aop是为了规范化

    aop面向切面编程，基于动态代理，可以使用jdk和cglib两种方式。
        Aspect：切面，给目标类增加的功能就是切面（例子中的日志，提交等）
            切面的特点：一般都是非业务方法，可以独立使用
        Orient：面向
        Programing：编程

        理解：
            oop：面向对象编程。程序设计时，把功能分程不同的对象实现。程序由不同的类组成，基于对象构建对象
            aop：分析找出切面，考虑切面在什么地方执行
                1、分析项目功能时找出切面（最难）
                2、合理安排切面执行的时间（目标方法前还是目标方法后）
                3、合理安排切面执行的位置，在哪个类，哪个方法增加功能

        术语：
            Aspect：切面，表示增强功能，就是一堆代码完成某个功能，一般是非业务功能。
                常见的切面的功能：日志，事务，统计信息，参数检查，权限验证
            JoinPoint：连接点（业务方法），连接业务方法和切面的位置。就是某个类中的业务方法（例子中的dosome方法）
            PiontCut：切入点，多个连接点方法的集合。多个方法（这些方法都要加入切面）
            目标对象：给哪个类增加功能，这个类就是目标对象
            Advice：通知，表示切面的功能执行的时间（目标方法之前还是之后）

        一个切面有三个关键要素：
            1.切面的功能代码：切面干什么
            2.切面的执行位置：PointCut表示
            3.切面的执行时间：Advice表示

    aop的实现：
        aop是个规范，是对动态代理的规范化
        aop的技术实现框架：
            1、spring内部实现了aop的规范
                spring在事务处理使用aop
                项目开发中很少使用spring的实现，因为spring笨重
            2、aspectJ：开源的专门做aop的框架。spring框架中集成了aspectJ框架
                aspectJ实现aop的两种方式：
                    1、使用xml配置文件：配置全局事务
                    2、使用注解【项目中一般都使用注解】
                        5个注解

    aspectJ框架的使用：
        1、切面的执行时间，这个执行时间在规范中叫做advice（通知、增强）
            在aspectJ框架中使用注解表示（也可以使用xml文件中的标签）
                @Before
                    前置通知，在目标方法之前执行切切面功能
                @AfterReturning
                    后置通知，在目标方法之后执行，可以获取目标方法的返回值
                @Around
                    环绕通知，在目标方法的前和后都能增强功能，还能控制目标方法的访问，修改返回值
                @AfterThrowing（很少用）
                    异常通知，在目标方法抛出异常后执行的通知
                @After（很少用）
                    最终通知，总是会被执行的代码
                @PointCut
                    管理切入点的，在项目中多个切入点是想用的可以复用，使用这个
                    在自定义方法上面使用，自定义方法名可以代替原切入点表达式
        2、执行的位置，使用切入点表达式
            execution(modifiers-pattern? ret-type-pattern
                     declaring-type-pattern?name-pattern(param-pattern)
                     throws-pattern?)

            modifiers-pattern:访问权限（public privacy）
            ret-type-pattern：返回值类型【必须】
            declaring-type-pattern：包名类名
            name-pattern(param-pattern)：方法名（参数类型和参数个数）【必须】
            throws-pattern：抛出异常类型
            ？：可选部分

            *：任意个字符
            ..:在方法参数中，表示任意个参数。用在包名后，表示当前包及其子包路径
            +：用在类名后，表示当前类及其子类。用在接口后，表示当前接口及其实现类

                ps：execution（public * *(..)）//只要方法是用public修饰的，不管方法名，返回值，方法参数。都可以加入切面功能
                    execution（* set*（..））//任何一个以set开始的方法都可以加入切面功能
                    execution（* com.xyz.service.*.*(..)）
                    //com.xyz.service.*这个包中的所有类   类.表示这个类中的方法
                    //表示这个包中的任意类，任意类中的任意方法，方法参数是任意的
                    execution（* com.xyz.service..*.*(..)）//com.xyz.service包和子包中所有类的所有方法
                    execution(* *..service.*.*(..))//在service包上级可以有多级包

        3.代理的使用方式：
            1.目标类有接口：框架使用jdk动态代理
            2.目标类没有接口：框架使用cglib动态代理
            3.有接口也可以强制使用cglib动态代理
====================================================================================================================
第四章 mybatis+spring  使用ioc技术，把mybatis框架中使用的对象统一交给spring创建和管理。

交给spring的mybatis对象：
    1.数据源DataSource,使用Druid连接池
    2.sqlsessionfactory，使用sqlsessionfactoryBean对象在内部创建的sqlsessionfactory
    3.dao对象，使用mapperScannerConfiger，在这个类的内部嗲用getMapper，创建dao对象

ioc可以整合mybatis和spring
    ioc可以创建对接，把mybatis中的对象交给spring统一创建，开发者从spring中获取对象
    开发人员不需要同时面对两个框架

mybatis的使用
    1.定义dao接口 StudentDao
    2.定义mapper文件 StudentDao.xml
    3.定义mybatis的主配置文件 mybatis.xml
    4.创建dao代理对象 dao=SqlSession.getMapper(StudentDao.class)

使用dao对象需要使用getMapper方法
    需要获取SqlSession对象，使用SqlSessionFactory的openSession（）方法
    创建SqlSessionFactory对象。通过读取mybatis的主配置文件能创建SqlSessionFactory对象
        主配置文件：
            1.数据库的信息
            2.mapper文件位置

会使用一个独立的连接池类替换mybatis默认自带的，把连接池类也交给spring创建

需要spring创建以下对象：
    1.独立的连接池类对象，使用阿里的druid连接池
    2.SqlSessionFactory对象
    3.创建出dao对象（最终目的）

需要学习上面三个对象的创建语法，使用xml的bean标签。
在ch07的applicationContext中有详细配置内容

=====================================================================================================
第五章:spring是如何控制事务的

什么是事务
    事务：mysql时提出事务，事务是指一组sql语句的集合，这个集合中有多条sql。希望这些sql都能成功，或者都失败。
            这些sql语句作为整体执行。

什么时候想到使用事务
    当操作涉及到多个表，或者是多个sql的insert，update，delete。需要保证这些语句都是成功才能完成我的功能，或者都失败
        保证操作是符号要求的

    在java代码中写程序控制事务，事务应该放在哪里？
        dao代表sql语句。servcie是业务方法。
        事务是放在service类的业务方法上，业务方法会调用多个dao方法，执行多个sql语句

通常使用jdbc访问数据库，还是mybatis凡是数据库怎么处理事务
    jdbc访问数据库，处理事务：
        connection conn；conn.commit();comm.rollback();

    mybatis:
       SqlSession.commit();  SqlSession.rollback();

‘通常使用jdbc访问数据库，还是mybatis凡是数据库怎么处理事务’处理事务的方式有什么不足
    1.不同的数据库访问技术，处理事务的对象方法不同。需要了解不同数据库访问技术的原理
    2.掌握多种数据库中事务的处理逻辑，什么时候提交，什么时候回滚
    3.处理事务的多种方法
    4.一个开发人员的压力过大，要求高

    总结：机制过多，技术太多

怎么解决不足
    spring提供了处理事务的统一模型，能够使用一种统一的步骤完成多种不同技术的处理。

    使用spring的事务处理机制能完成mybatis的访问数据库处理（多种数据库都可以）

    使用spring基本不用写代码

处理事务需要怎么做，做什么
    spring处理的步骤是固定的：把事务使用的信息提供给spring
        1.相关的类完成提交和回滚，spring内部使用事务管理器对象，代替人使用
            事务管理器是一个接口和众多实现类。定义了事务的重要方法，commit，rollback
            实现类：spring把每种数据库访问技术对应的事务处理类都创建好了。

        怎么使用：需要告诉spring使用那种访问技术，声明数据库访问技术对应的事务管理器实现类，在spring的配置文件中<bean>配置

        2.业务方法需要什么样的事务，声明事务的类型
            说明方法需要的事务：
            1.事务的隔离级别：四个值
                ISOLATION_READ_UNCOMMITTED读未提交
                ISOLATION_READ_COMMITTED读已提交
                ISOLATION_REPEATABLE_READ可重复读
                ISOLATION_SERIALIZABLE串行化
            2.事务的超时时间：一个方法最长的执行时间，超过就回滚。单位是秒，默认-1，无最长时间（一般也不配置）
            3.事务的传播行为：控制业务方法是否有事务，是什么样的事务
                7个行为，表示业务方法调用是，事务在方法之间是如何使用的
                这三个需要掌握
                1）PROPAGATION_REQUIRED
                    指定方法必须在事务中执行。当前存在事务就加到事务中，没有事务新建一个事务
                2）PROPAGATION_REQUIRES_NEW
                    方法执行时总是新建一个事务。
                3）PROPAGATION_SUPPORTS
                    方法支持事务，没有事务也行。（查询）

             【以上三个方面spring就知道怎么处理事务了】

        3.spring提交和回滚事务的时机
            1）业务方法，执行成功，没有异常抛出，方法执行完毕，spring在方法执行后提交事务
            2）业务方法抛出运行时异常，err时，spring执行回滚，调用事务管理器的rollback（自动调用）
            3）非运行时异常，主要是受查异常时，提交事务
                受查异常，必须处理的异常：IOException，SQLException

    总结
        管理事务的事务管理器和实现类
        spring事务是统一的
            1.指定使用什么事务实现类《bean》
            2。指定哪些类，哪些方法需要加入事务功能
            3.指定方法需要的隔离级别，传播行为，超时

        需要告诉spring，类的信息，方法的名称，方法的传播行为

spring框架中提供的事务处理的机制：
    1.适合中小项目使用的注解方案
        spring自己使用aop实现给业务方法增加事务的功能。使用@Transactional注解增加事务
            @Transactional：spring自己的注解，放在方法的上面，表示房前方法具有事务。可以给注解的属性赋值，表示具体的隔离级别，
            传播行为，异常信息等

        使用@Transactional步骤：只能在public方法上
            1）声明事务管理器对象
             <bean id="" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            2）开启事务注解驱动：告诉spring，开发者要使用注解的方式管理事务
                spring使用aop机制，创建@Transactional所在的类代理对象，给方法加入事务的功能

                spring给业务方法加入事务：在业务方法执行之前，开启事务，在业务方法之后提交或回滚事务，使用aop的环绕通知

                @Around（“增加的事务功能的业务方法名称”）
                Object fun1（）{
                    开启事务
                    try{
                        xxxxxx
                        spring的事务管理器调用commit提交事务
                    }catch{
                        spring事务管理器rollback
                    }

                }

                不需要自己写代码

            3）在自己的方法上面加@Transactional注解

    2.适合大型项目，有很多的类，方法，需要配置大量的事务，使用aspectj框架功能，在spring配置文件中声明类方法需要的事务。
        业务方法和事务完全分离

        实现步骤：在xml配置文件中实现
        1）使用aspectj依赖
        2）声明事务管理器对象
        3）声明方法需要的事务类型（配置方法的事务属性【隔离级别，传播行为，超时】）
        4）配置aop：指定哪些类需要创建代理