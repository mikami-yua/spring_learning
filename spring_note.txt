spring框架
	spring：在2002年出现，解决企业级开发
		帮助开发人员创建对象，管理对象之间的关系

	spring核心技术：IOC AOP 能实现模块之间，类之间的解耦合。

	依赖：
		class A中使用了class B的属性或者方法。A依赖于B
		spring能管理A和B之间的关系
	
	spring轻量，可以集成其他框架

框架是其他人写好的软件
	需要知道框架能干什么 mybatis可以访问数据库
	需要知道框架的语法
	框架的内部实现

spring第一个核心功能 ioc：Inversion of Contorl 控制反转，是一个理论
	描述：把对象的创建，赋值，管理等工作都交给容器实现。对象的创建由外部资源来完成
	spring也称为容器

	控制：创建对象，对象赋值，对象之间的关系管理
	反转：
		正转：开发人员使用new，开发人员主动管理对象
		反转：把开发者管理创建对象的权限转移给代码之外的容器实现。由容器来代替开发者管理和创建对象
	
	容器是一个服务器软件，一个框架

	作用：
		减少对代码的改动也能实现不同的功能。实现解耦合

    适合使用spring的对象：
        dao类，service类，controller类，工具类
        spring中的对象默认是单例的，在容器中叫这个名的对象只有一个
    不适合在spring中的对象：
        实体类：实体类的数据来自数据库
        servlet，监听器，过滤器（由tomcat创建）
    如何把对象放到容器中：
        使用xml文件：使用《bean》
        使用注解

java中创建对象的方式：
	1.构造方法 new
	2.反射
	3.序列化
	4.克隆
	5.ioc：容器创建对象-----不需要再程序中写代码
	6.动态代理

ioc的体现：
	servlet：
		1.创建类继承HttpServlet
		2.再web.xml注册Myservlet
		3.没有创建过Myservlet对象
		4.Servlet对象是tomcat服务器帮助创建的
		tomcat也称为容器：
			里面存放的有：监听器，过滤器
	
ioc的技术实现
	DI 依赖注入
		只需要在程序中提供要使用的对象名称，对象如何创建赋值查找都由容器实现（容器里有个工程师）
	spring使用di实现了ioc功能，spring底层创建对象使用的是反射

	ioc：控制反转
	    是一种思想，指导开发者在容器中，在代码之外，给属性赋值，管理依赖

	spring使用DI技术，底层使用反射机制

	Di给属性赋值
	    set注入：使用set方法
	        1.简单类型的set注入
	             <property name="属性名" value="属性值" />
	        2.引用类型的set注入
	            <property name="属性名" ref="bean的id（对象名称）" />
	    构造注入:使用有参数的构造方法
	        使用<constructor-arg>标签
	            1.使用name属性：形参名
	            2.使用index属性：形参的位置

使用spring的步骤：
    1.加入依赖
        <dependency>
              <groupId>org.springframework</groupId>
              <artifactId>spring-context</artifactId>
              <version>5.2.5.RELEASE</version>
        </dependency>
    2.创建类
    3.创建spring的配置文件，使用bean声明对象
    4.使用对象，使用applicationContext接口和它的实现类：ClassPathXmlApplicationContext的getBean（）得到对象


对象的赋值
    1.基于xml的DI

    2.基于注解的DI【重要】
        @override就是一个注解

 多个配置文件
    1.每个文件都小，打开很块
    2.避免多人竞争带来的冲突
        一个模块一个配置文件
    分配方式：
        1.按业务功能
        2.按类的功能（数据库功能，事物相关，service相关）

基于注解的DI【重要】
    通过注解完成java对象的创建和属性赋值

    使用步骤：
        1.加入maven的依赖 spring-context，在加入spring-context的同时，间接加入spring-aop的依赖。
            使用注解必须使用spring-aop依赖
        2.在类中加入spring注解
        3.在spring的配置文件中，加入一个组件扫描器的标签，说明注解在项目中的位置

    自动注入：
        由spring根据某些规则，给引用类型赋值
        常用byName和byType方式
            byName：按名称注入
                java类中引用类型的属性名和spring容器中bean的id一样，数据类型一样，这样的bean赋值给引用类型
            byType：
                java类中引用类型的数据类型和spring容器中bean的class是同源关系的，这样的bean能赋值给引用类型

    需要学习的注解：
        1.@Component
            用于创建对象（普通对象）
        2.@Respotory
            创建dao对象（访问数据库）
        3.@Service
            创建service对象（处理业务逻辑）有事物功能
        4.@Controller
            创建控制器对象的，接收请求，显示处理结果
        5.@Value
            简单类型的赋值
        6.@Autowired
            spring中引用类型的赋值（byName和byTyep，默认使用byType）
        7.@Resource
            jdk中引用类型的赋值（默认使用byName）

        注解的使用步骤：
            1.加入依赖：
                spring-context 间接加入 spring-aop
            2.在类中加入注解
            3.在spring的配置文件中，加入组件扫描器的标签，<context:component-scan base-package="org.example.ba07" />

ioc可以实现解耦合
    ioc实现业务对象之间的解耦合：service和dao对象之间的解耦合



aop------面向切面变成

    动态代理：能创建对象，原有代码不改动的情况下可以实现功能的增加和功能的增强
        两种实现方式：
            jdk动态代理：要求目标类必须有接口
                使用Proxy Method InnovationHandler三个类实现动态代理
            CGLIB动态代理：不许需要有接口（使用继承的方式）
                对类的要求低，只要能继承就行